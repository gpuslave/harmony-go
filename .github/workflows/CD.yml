name: Continuous Delivery

on:
  pull_request:
    branches:
      - 'main'
  push:
    branches: [ 'main' ]

  workflow_dispatch:

env:
  IMAGE_NAME: 'harmony-go'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with: 
          go-version-file: 'src/go.mod'
          cache-dependency-path: |
            src/go.sum 

      - name: Download Go Dependencies
        working-directory: ./src
        run: |
          go mod download

      - name: Build Binary
        id: build-bin
        working-directory: ./src
        run: |
          CGO_ENABLED=0 GOOS=linux go build -ldflags="-w -s" -o harmony-go
          echo "digest=$(sha256sum harmony-go | cut -d' ' -f1)" >> $GITHUB_OUTPUT
          echo "git_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      
      - uses: actions/upload-artifact@v4
        with:
          name: harmony-bin-${{ steps.build-bin.outputs.git_sha }}
          path: src/harmony-go
          retention-days: 2

  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout:
            src
      
      - uses: actions/setup-go@v5
        with: 
          go-version-file: 'src/go.mod'
          cache-dependency-path: |
            src/go.sum 

      - name: Download Go Dependencies
        working-directory: ./src
        run: |
          go mod download

      - name: Test Application
        working-directory: src/
        run: |
          go vet

          echo "### Go Test Results" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

          go test -v 2>&1 | tee TEST_OUTPUT.log

          cat TEST_OUTPUT.log >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            exit ${PIPESTATUS[0]}
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: [ 'build', 'test' ]

    steps:
      - uses: actions/checkout@v4

      - name: Install YC CLI
        shell: bash
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          echo "$HOME/yandex-cloud/bin" >> $GITHUB_PATH

      # NOTE: May impove security with /dev/shm/ssh/
      - name : Run SSH Tunnel
        run: |
          mkdir -p ./.ssh
          touch ./.ssh/bastion && chmod 600 ./.ssh/bastion
          echo "${{ secrets.BASTION_KEY }}" > ./.ssh/bastion

          ssh -f -N \
            -i "./.ssh/bastion" \
            -D 1080 \
            -o StrictHostKeyChecking=no \
            -o ServerAliveInterval=30 \
            -o ServerAliveCountMax=3 \
            -o ExitOnForwardFailure=yes \
            ${{ secrets.BASTION_USER }}@${{ secrets.BASTION_HOSTNAME }}

      - name: Create SA Key 
        shell: bash
        run: |
          touch ./sa_key.json && chmod 600 ./sa_key.json
          cat << 'EOF' > sa_key.json
            ${{ secrets.SA_KEY }}
          EOF

      - name: Check pods
        run: |
          yc config profile create sa-profile
          yc config set service-account-key <(echo "${{ secrets.SA_KEY }}")
          yc config set folder-id ${{ secrets.FOLDER_ID}}
          yc config set cloud-id ${{ secrets.CLOUD_ID}}
          rm -rf ./sa_key.json

          yc managed-kubernetes cluster get-credentials \
            --internal \
            --name ${{ vars.CLUSTER_NAME }}

          KUBECTL_CLUSTER=$(kubectl config view -o jsonpath="{.clusters[0].name}")
          kubectl config set-cluster "$KUBECTL_CLUSTER" \
            --proxy-url="socks5://localhost:1080"
          
          kubectl get pods -A

      - name: Clean up
        run: |
          rm -rf ./.ssh/bastion

# echo "DEBUG:"
# kubectl config view

# yc config set service-account-key ./sa_key.json